# Environment variables for local development
# Copy this file to .env and fill in your values

This document describes the Better Auth integration in the Follow API.

# API Server Configuration

## OverviewPORT=3001



Better Auth is a comprehensive authentication library that provides:# PostgreSQL Database Configuration

- Email/password authenticationPOSTGRES_URL=

- Social OAuth providers (GitHub, Google, etc.)

- Two-factor authentication (2FA)# Supabase Configuration (Optional - for Supabase Auth)

- Session managementSUPABASE_URL=

- Stripe integration for subscriptionsSUPABASE_ANON_KEY=

- Database-agnostic design

# Better Auth - Social Providers (Optional)

## ArchitectureGITHUB_CLIENT_ID=

GITHUB_CLIENT_SECRET=

### ComponentsGOOGLE_CLIENT_ID=

GOOGLE_CLIENT_SECRET=

1. **Better Auth Server** (`src/lib/better-auth.ts`)

   - Core authentication configuration# Stripe Configuration (Optional - for subscriptions)

   - Database connection (PostgreSQL)STRIPE_SECRET_KEY=

   - Social provider setupSTRIPE_WEBHOOK_SECRET=

   - Plugin configuration

2. **Better Auth Router** (`src/routes/better-auth.ts`)
   - Hono route handler
   - Converts Hono requests to Node.js format
   - Handles all `/better-auth/*` endpoints

3. **Client Integration**
   - Desktop app uses `@follow/shared/auth`
   - Mobile app uses `@better-auth/expo/client`
   - SSR app uses Better Auth client

## Configuration

### Environment Variables

```env
# Required
POSTGRES_URL=postgresql://user:password@localhost:5432/follow

# Optional - Social Providers
GITHUB_CLIENT_ID=your_github_client_id
GITHUB_CLIENT_SECRET=your_github_secret
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_secret

# Optional - Stripe
STRIPE_SECRET_KEY=sk_test_xxx
STRIPE_WEBHOOK_SECRET=whsec_xxx
```

### Database Setup

Better Auth automatically creates required tables on first run:
- `user` - User accounts
- `session` - Active sessions
- `account` - Linked social accounts
- `verification` - Email verification tokens
- `two_factor` - 2FA settings

## API Endpoints

All Better Auth endpoints are prefixed with `/better-auth`:

### Authentication

- `POST /better-auth/sign-up/email` - Email/password registration
- `POST /better-auth/sign-in/email` - Email/password sign in
- `POST /better-auth/sign-out` - Sign out
- `GET /better-auth/session` - Get current session
- `POST /better-auth/forget-password` - Request password reset
- `POST /better-auth/reset-password` - Reset password with token

### Social Authentication

- `GET /better-auth/sign-in/social` - Initiate OAuth flow
- `GET /better-auth/callback/[provider]` - OAuth callback

Supported providers:
- GitHub (`/better-auth/sign-in/social?provider=github`)
- Google (`/better-auth/sign-in/social?provider=google`)

### Two-Factor Authentication

- `POST /better-auth/two-factor/generate` - Generate 2FA secret
- `POST /better-auth/two-factor/enable` - Enable 2FA with TOTP
- `POST /better-auth/two-factor/disable` - Disable 2FA
- `POST /better-auth/two-factor/verify` - Verify TOTP code

### User Management

- `GET /better-auth/user` - Get user profile
- `PATCH /better-auth/user` - Update user profile
- `DELETE /better-auth/user` - Delete account
- `POST /better-auth/change-email` - Change email
- `POST /better-auth/change-password` - Change password

### Stripe Integration

- `POST /better-auth/subscription/create-checkout` - Create Stripe checkout
- `GET /better-auth/subscription/billing-portal` - Access billing portal
- `POST /better-auth/webhook/stripe` - Stripe webhook handler

## Client Usage

### Web/Desktop (React)

```typescript
import { authClient } from "@follow/shared/auth"

// Sign up
await authClient.signUp.email({
  email: "user@example.com",
  password: "securePassword123",
  name: "John Doe",
})

// Sign in
await authClient.signIn.email({
  email: "user@example.com",
  password: "securePassword123",
})

// Get session
const { data: session } = await authClient.getSession()

// Sign out
await authClient.signOut()

// Social sign in
await authClient.signIn.social({
  provider: "github",
  callbackURL: "/dashboard",
})
```

### Mobile (React Native)

```typescript
import { authClient } from "@/src/lib/auth"

// Sign up
await authClient.signUp.email({
  email: "user@example.com",
  password: "securePassword123",
  name: "John Doe",
})

// Sign in
await authClient.signIn.email({
  email: "user@example.com",
  password: "securePassword123",
})

// Get session
const { data: session } = await authClient.useSession()

// Sign out
await authClient.signOut()
```

## Features

### Email/Password Authentication

- Secure password hashing (bcrypt)
- Email verification support
- Password reset flow
- Configurable password requirements

### Social Authentication

Better Auth supports 10+ OAuth providers out of the box:
- GitHub
- Google
- Facebook
- Apple
- Microsoft
- Discord
- Twitter
- LinkedIn
- GitLab
- Spotify

To add a provider:

```typescript
// In src/lib/better-auth.ts
socialProviders: {
  discord: {
    clientId: process.env.DISCORD_CLIENT_ID || "",
    clientSecret: process.env.DISCORD_CLIENT_SECRET || "",
    enabled: !!process.env.DISCORD_CLIENT_ID,
  },
}
```

### Two-Factor Authentication

- TOTP (Time-based One-Time Password)
- QR code generation
- Backup codes
- Optional 2FA for enhanced security

Enable 2FA:

```typescript
// Generate secret and QR code
const { data } = await authClient.twoFactor.generate()

// Enable with TOTP code
await authClient.twoFactor.enable({
  code: "123456",
})
```

### Session Management

- Secure session tokens
- Configurable expiration (default: 30 days)
- Automatic session refresh
- Device tracking (IP address, user agent)
- Session revocation

### Stripe Integration

- Subscription management
- Checkout session creation
- Customer portal access
- Webhook handling
- Usage-based billing support

Create subscription checkout:

```typescript
const { data } = await authClient.subscription.createCheckout({
  plan: "pro",
  returnUrl: "https://app.example.com/billing",
})

// Redirect to Stripe checkout
window.location.href = data.url
```

## Middleware Integration

Better Auth provides middleware for protecting routes:

```typescript
import { auth } from "./lib/better-auth"

// In your Hono routes
app.get("/protected", async (c) => {
  const session = await auth.api.getSession({
    headers: c.req.raw.headers,
  })

  if (!session) {
    return c.json({ error: "Unauthorized" }, 401)
  }

  return c.json({ user: session.user })
})
```

## Database Schema

Better Auth creates the following tables:

### user
```sql
CREATE TABLE "user" (
  id TEXT PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  email_verified BOOLEAN DEFAULT FALSE,
  name TEXT,
  image TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  -- Additional fields from configuration
  handle TEXT,
  bio TEXT,
  website TEXT,
  social_links JSONB,
  stripe_customer_id TEXT
);
```

### session
```sql
CREATE TABLE "session" (
  id TEXT PRIMARY KEY,
  user_id TEXT NOT NULL REFERENCES "user"(id),
  expires_at TIMESTAMP NOT NULL,
  token TEXT UNIQUE NOT NULL,
  ip_address TEXT,
  user_agent TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
```

### account
```sql
CREATE TABLE "account" (
  id TEXT PRIMARY KEY,
  user_id TEXT NOT NULL REFERENCES "user"(id),
  provider TEXT NOT NULL,
  provider_account_id TEXT NOT NULL,
  access_token TEXT,
  refresh_token TEXT,
  expires_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(provider, provider_account_id)
);
```

## Security Best Practices

### Password Requirements

Configure in `src/lib/better-auth.ts`:

```typescript
emailAndPassword: {
  enabled: true,
  requireEmailVerification: true,
  minPasswordLength: 8,
  requireUppercase: true,
  requireNumbers: true,
  requireSpecialChars: true,
}
```

### Rate Limiting

Add rate limiting middleware:

```typescript
import { rateLimiter } from "hono/rate-limiter"

app.use(
  "/better-auth/*",
  rateLimiter({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Max 100 requests per window
  }),
)
```

### CORS Configuration

Configure CORS for your frontend:

```typescript
app.use(
  "/better-auth/*",
  cors({
    origin: ["https://app.example.com"],
    credentials: true,
  }),
)
```

### HTTPS Only

In production, ensure cookies are secure:

```typescript
advanced: {
  cookiePrefix: "__Secure-better-auth",
  secureCookie: true, // HTTPS only
}
```

## Troubleshooting

### Database Connection Issues

```bash
# Test database connection
psql $POSTGRES_URL

# Check tables
\dt

# Verify user table
SELECT * FROM "user" LIMIT 1;
```

### Session Issues

```typescript
// Debug session
const session = await auth.api.getSession({
  headers: request.headers,
})
console.log("Session:", session)
```

### OAuth Callback Errors

1. Verify callback URLs in provider dashboard
2. Check environment variables
3. Ensure `callbackURL` matches provider settings

### Stripe Webhook Issues

1. Test webhook locally with Stripe CLI:
```bash
stripe listen --forward-to localhost:3001/better-auth/webhook/stripe
```

2. Verify webhook secret matches environment variable
3. Check webhook signature validation

## Migration from Supabase Auth

If migrating from Supabase Auth:

1. Export users from Supabase
2. Hash passwords with bcrypt
3. Import users to Better Auth tables
4. Update client code to use Better Auth API
5. Test authentication flows

See migration script in `scripts/migrate-from-supabase.ts` (TODO).

## Testing

```typescript
// Test authentication
describe("Better Auth", () => {
  it("should sign up user", async () => {
    const response = await fetch("http://localhost:3001/better-auth/sign-up/email", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        email: "test@example.com",
        password: "test123",
        name: "Test User",
      }),
    })
    expect(response.status).toBe(200)
  })
})
```

## Resources

- [Better Auth Documentation](https://better-auth.com)
- [Better Auth GitHub](https://github.com/better-auth/better-auth)
- [Stripe Integration](https://better-auth.com/docs/plugins/stripe)
- [Two-Factor Auth](https://better-auth.com/docs/plugins/two-factor)

## Support

For issues or questions:
1. Check [Better Auth Docs](https://better-auth.com/docs)
2. Review logs in console
3. Open issue in Follow repository
